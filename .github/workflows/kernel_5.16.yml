# This is a basic workflow to help you get started with Actions

name: Build 5.16.y

# Controls when the workflow will run
on:
  workflow_dispatch:
  #schedule:
    #- cron: "36 19 * * 2,6"
   # inputs:
    #  ssh:
     #   description: 'SSH connection to Actions'
      #  required: false
       # default: 'false'

env:
  UPLOAD_RELEASE: true
  TZ: Asia/Jakarta

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@main

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install subversion build-essential libncurses-dev bison flex libssl-dev libelf-dev
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo ln -sf /usr/share/zoneinfo/Asia/Jakarta /etc/localtime
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir
        sudo chown $USER:$GROUPS /workdir/upload

    - name: Check for updates
      id: check
      run: |
         echo "::set-output name=status::success"

    - name: Get source code
      id: code
      working-directory: /workdir
      if: steps.check.outputs.status == 'success'
      run: |
        df -hT $PWD
        kernel_file=$(curl -s https://www.kernel.org/ | grep '5.16' | grep '.tar.xz' | awk -F '"' '{print $2}' | head -n 1)
        kernel_ver=$(curl -s https://www.kernel.org/ | grep '5.16' | grep '.tar.xz' | awk -F '"' '{print $2}' | awk -F '/' '{print $8}' | awk -F '.tar.xz' '{print $1}' | awk -F 'linux-' '{print $2}' | head -n 1)
        wget -O kernel.tar.xz $kernel_file
        tar -Jxvf kernel.tar.xz -C /workdir && cd /workdir/linux-$kernel_ver
        echo "::set-output name=status::success"

    - name: Compile the kernel
      id: compile
      if: steps.code.outputs.status == 'success'
      working-directory: /workdir
      run: |
        kernel_ver=$(curl -s https://www.kernel.org/ | grep '5.16' | grep '.tar.xz' | awk -F '"' '{print $2}' | awk -F '/' '{print $8}' | awk -F '.tar.xz' '{print $1}' | awk -F 'linux-' '{print $2}' | head -n 1)
        cd linux-$kernel_ver
        wget -O .config https://raw.githubusercontent.com/radityabh/kernel-compiler/main/config/kernel-5.16.y/config
        sed -ri '/CONFIG_SYSTEM_TRUSTED_KEYS/s/=.+/=""/g' .config && scripts/config --disable MODULE_SIG && scripts/config --disable DEBUG_INFO
        wget https://raw.githubusercontent.com/radityabh/kernel-compiler/main/scripts/add_driver.sh
        wget https://raw.githubusercontent.com/radityabh/kernel-compiler/main/scripts/run_patch.sh
        chmod +x ./*.sh
        ./add_driver.sh
        ./run_patch.sh
        rm -rf ./patch
        rm -rf ./*.sh
        echo -e "$(nproc) thread compile"
        export LOCALVERSION=
        export KDEB_PKGVERSION=1
        sudo time make ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- -j$(nproc) deb-pkg
        cd /workdir 
        mv *.deb /workdir/upload
        echo "::set-output name=status::success"
        echo "FILE_DATE=Kernel_Amlogic_$kernel_ver_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV   

    - name: Check space usage
      if: (!cancelled()) && steps.compile.outputs.status == 'success'
      run: df -hT

    - name: Generate release tag
      id: tag
      if: env.UPLOAD_RELEASE == 'true' && steps.compile.outputs.status == 'success' && !cancelled()
      run: |
        kernel_ver=$(curl -s https://www.kernel.org/ | grep '5.16' | grep '.tar.xz' | awk -F '"' '{print $2}' | awk -F '/' '{print $8}' | awk -F '.tar.xz' '{print $1}' | awk -F 'linux-' '{print $2}' | head -n 1)
        echo "::set-output name=release_tag::Amlogic_Kernel_${kernel_ver}_latest_arm64_$(date +"%Y.%m.%d-%H%M")"
        touch release.txt
        echo "::set-output name=status::success"

    - name: Upload Firmware Files to GitHub Release
      uses: ncipollo/release-action@v1
      if: steps.tag.outputs.status == 'success' && !cancelled()
      with:
        allowUpdates: true
        token: ${{ secrets.GITHUB_TOKEN }}
        tag: ${{ steps.tag.outputs.release_tag }}
        artifacts:  /workdir/upload/*
        body: |
          **Custom Kernel For S9XXX**
